cmake_minimum_required(VERSION 3.13)

if(RISCV_TOOLCHAIN_INCLUDED)
  return()
endif()

set(RISCV_TOOLCHAIN_INCLUDED true)

foreach(PREFIX "riscv64-unknown-elf" "riscv64-elf" "riscv64-none-elf" "riscv64-unknown-none-elf")
    find_program(PREFIX_TOOLCHAIN_GCC "${PREFIX}-gcc")
    if (PREFIX_TOOLCHAIN_GCC)
        set(DEFAULT_RISCV_TOOLCHAIN_PREFIX "${PREFIX}-")
        set(DEFAULT_RISCV_TOOLCHAIN_ROOT "/usr/${PREFIX}/")
        break()
    endif()
endforeach()

set(RISCV_TOOLCHAIN_PREFIX "${DEFAULT_RISCV_TOOLCHAIN_PREFIX}" CACHE STRING "RISC-V toolchain prefix")
set(RISCV_TOOLCHAIN_ROOT "${DEFAULT_RISCV_TOOLCHAIN_ROOT}" CACHE PATH "RISC-V toolchain path")

if (NOT RISCV_TOOLCHAIN_PREFIX)
    message(SEND_ERROR "Toolchain prefix is not specified")
endif()

if (NOT RISCV_TOOLCHAIN_ROOT)
    message(SEND_ERROR "Toolchain root is not specified")
endif()

set(RISCV_ARCH "rv64ima_zicsr_zifencei" CACHE STRING "RISC-V instruction set")
set(RISCV_ABI "lp64" CACHE STRING "RISC-V abi")
set(RISCV_CMODEL "medany" CACHE STRING "RISC-V cmodel")

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR riscv)
set(CMAKE_CROSSCOMPILING 1)

set(CMAKE_FIND_ROOT_PATH ${RISCV_TOOLCHAIN_ROOT})
list(APPEND CMAKE_PREFIX_PATH "${RISCV_TOOLCHAIN_ROOT}")

find_program(CMAKE_C_COMPILER "${RISCV_TOOLCHAIN_PREFIX}gcc" REQUIRED)

set(RISCV_COMPILER_FLAGS)
set(RISCV_LINKER_FLAGS)
set(RISCV_LINKER_FLAGS_EXE)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)


set(RISCV_COMPILER_FLAGS "${RISCV_COMPILER_FLAGS} \
    -march=${RISCV_ARCH} -mabi=${RISCV_ABI} -mcmodel=${RISCV_CMODEL} \
    -ffreestanding"
    )

set(RISCV_LINKER_FLAGS "-nostdlib")

set(CMAKE_C_FLAGS             "${RISCV_COMPILER_FLAGS} ${CMAKE_C_FLAGS}")
set(CMAKE_ASM_FLAGS           "${RISCV_COMPILER_FLAGS} ${CMAKE_ASM_FLAGS}")

set(CMAKE_SHARED_LINKER_FLAGS "${RISCV_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${RISCV_LINKER_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS    "${RISCV_LINKER_FLAGS} ${RISCV_LINKER_FLAGS_EXE} ${CMAKE_EXE_LINKER_FLAGS}")
